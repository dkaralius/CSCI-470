import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;
import java.awt.Graphics;

public class SortAnimationPanel extends JPanel implements Runnable
{
   public int randInt[];
   private int speedInt;
   private int condition;
   private String sortingAlgo;
   private Thread thread;
  
   
   public volatile boolean paused = false;
   private volatile boolean running = true;
   
   public void populateArray()
   {  
    Random rand = new Random();                                   // calling random class to generate random numbers
    randInt = new int[this.getWidth()];                           // initializing array to its panel width
    rand.setSeed(System.currentTimeMillis());
    for(int i = 0; i < this.getWidth();i++)                       // assigning the random values to array 
    {
      randInt[i] = rand.nextInt(this.getHeight() -1) + 1;
    }
    this.repaint();                                               // calling paint method
   }
   
   @Override
   protected void paintComponent(Graphics g) 
   {
      super.paintComponent(g);
       
      g.clearRect(this.getX(),this.getY(),this.getWidth(),this.getHeight());
      g.setColor(Color.WHITE);
      g.fillRect(this.getX(),this.getY(),this.getWidth(),this.getHeight());

      this.repaint();   
       
      if(randInt == null) 
      {
         return;           
      }
      for(int i = 0;i < this.getWidth();i++)
      {
         g.setColor(Color.GRAY);
         g.drawLine(i,randInt[i],i,this.getHeight() );
      }
   }
   public void initializeThread(String algorithm)
   {
      condition = 0;
      thread = new Thread(this);

      if(algorithm.equals("Selection Sort"))
      {
         condition = 1;
      }
      else if(algorithm.equals("Insertion Sort"))
      {
         condition = 2;
      }
      else if(algorithm.equals("Bubble Sort"))
      {
         condition = 3;
      }
      else if(algorithm.equals("Shell Sort"))
      {
         condition = 4;
      }
      
      thread.start();
      this.setThreadState();
   }
   
   public void setThreadState()
   {
      synchronized(this)
      {
         try
         {
            while(paused)
            {
               wait();
            }
         } 
         catch(InterruptedException e)
         {
            System.out.println("Exception occured " + e);
         }
      }
        
   }
   
   public void setSpeed(String speed)
   {
      if(speed.equals("Slow"))
      {
         speedInt = 100;
      }
      if(speed.equals("Medium"))
      {
         speedInt = 50;
      } 
      if(speed.equals("Fast"))
      {
         speedInt = 10;
      }        
   }
   
   synchronized void pause()
   {
      paused = true;
   }
   
   synchronized void resume()
   {
      paused = false;
      notify();
   }
   synchronized void stop()
   {
      thread.interrupt();
      paused = false;
      randInt = null;
      notify();
   }
   
   public void run()
   {
         switch (condition)
         {
           case 1:
               selectionSort(randInt);
           case 2:
               insertionSort(randInt);
           case 3:
               bubbleSort(randInt);
           case 4:
               shellSort(randInt);
         }
   }
   /**************************************************************
   * Selection Sort algorithm.                                   *
   **************************************************************/
   public int[] selectionSort(int[] array)
   {
      try
      {
         for (int i = 0; i < array.length - 1; i++)
         {
            int index = i;
            for (int j = i + 1; j < array.length; j++)
            if (array[j] > array[index])
            {
               index = j;
            }
            int smallerNumber = array[index]; 
            array[index] = array[i];
            array[i] = smallerNumber;
            thread.sleep(speedInt);
            repaint();
            this.setThreadState();
         }
      }
      catch(Exception e)
         {
            System.out.println("Exception occured " + e);
         }
      
      return array;
   } 
   /**************************************************************
   * Insertion Sort Algorithm.                                   *
   **************************************************************/
   public void insertionSort(int[] array) 
   {
      int i, j, temp;
      try
      { 
         for (i = 1; i < array.length; i++) 
         {
            temp = array[i];
            j = i;
            while (j > 0 && array[j - 1] < temp) 
            {
               array[j] = array[j - 1];
               j--;
               repaint();
               this.setThreadState();
               thread.sleep(speedInt);
            }
            array[j] = temp;
            repaint();
         }
     }
     catch(Exception e)
     {
        System.out.println("Exception occured " + e); 
     }
   }
   /**************************************************************
   * Bubble Sort Algorithm.                                      *
   **************************************************************/
   public void bubbleSort(int[] array)
   {
      try
      {
      int n = array.length;
      int temp = 0;
         for(int i=0; i < n; i++)
         {
            thread.sleep(speedInt);
            this.setThreadState();
            for(int j = 1; j < (n-i); j++)
            {
               if(array[j-1] < array[j])
               {
                  temp = array[j-1];
                  array[j-1] = array[j];
                  array[j] = temp;
                  repaint();
               }
            }
         }
      }
      catch(Exception e)
      {
        System.out.println("Exception occured " + e);
      }
    }
   /**************************************************************
   * Shell Sort Algorithm.                                       *
   **************************************************************/
   public void shellSort(int[] array) 
   {
      try
      {
         int increment = array.length / 2;
         while (increment > 0) 
         {
            for (int i = increment; i < array.length; i++)
            {
               int j = i;
               int temp = array[i];
               try
               {
                  while (j >= increment && array[j - increment] < temp)
                  {
                     array[j] = array[j - increment];
                     thread.sleep(speedInt);
                     repaint();
                     this.setThreadState();
                     j = j - increment;
                  }
               }
               catch(Exception e)
               {
                  System.out.println("Exception occured " + e);
               }
                  array[j] = temp;
            }
            if (increment == 2) 
            {
               increment = 1;
            } 
            else 
            {
               increment *= (5.0 / 11);
            }
         }
      }
      catch(Exception e)
      {
         System.out.println("Exception occured " + e);
      }
   }
}